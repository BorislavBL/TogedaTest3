openapi: 3.0.1
info:
  title: Togeda Mobile App API
  description: Togeda Main Api
  version: v1
servers:
- url: /
  description: Default Server URL
paths:
  /users/sendFriendRequest/{userId}:
    post:
      tags:
      - user-controller
      operationId: sendFriendRequest
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/addBasicInfo:
    post:
      tags:
      - user-controller
      operationId: addBasicInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
            examples:
              Add basic info sample:
                summary: simple add to already registered user
                description: Add basic info sample
                value:
                  subToEmail: true
                  firstName: Kalo
                  lastName: Mitev
                  gender: MALE
                  birthDate: 1990-01-01
                  visibleGender: true
                  location:
                    name: LocationName
                    address: locationAddress
                    city: Sofia
                    state: SofiaState
                    country: country
                    latitude: 123.345
                    longitude: 123.345
                  occupation: OccupationName
                  profilePhotos:
                  - https://example.com/photo1.jpg
                  - https://example.com/photo2.jpg
                  interests:
                  - name: InterestName
                    icon: 0xe52a
                    category: MyCategory
                  - name: InterestName2
                    icon: 0xe52b
                    category: MyCategory1
                  - name: InterestName3
                    icon: 0xe52a
                    category: MyCategory2
                  - name: InterestName
                    icon: 0xe52a
                    category: MyCategory3
                  - name: InterestName
                    icon: 0xe52a
                    category: MyCategory4
                  - name: InterestName
                    icon: 0xe52a
                    category: MyCategory5
                  phoneNumber: "359885230163"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/acceptOrDenyFriendRequest/{userId}:
    post:
      tags:
      - user-controller
      operationId: acceptOrDenyFriendRequest
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - ACCEPT
          - DENY
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /stripe/webhook:
    post:
      tags:
      - stripe-controller
      operationId: stripeWebhookEndpoint
      parameters:
      - name: Stripe-Signature
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /stripe/connect/create-account:
    post:
      tags:
      - stripe-controller
      operationId: createAccount
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts:
    get:
      tags:
      - post-controller
      operationId: getAllPosts
      parameters:
      - name: categories
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: toDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: fromDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: longitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: latitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: distance
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    post:
      tags:
      - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/{userId}/rate:
    post:
      tags:
      - post-controller
      operationId: ratePostParticipant
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipationRatingDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/tryToJoinPost:
    post:
      tags:
      - post-controller
      operationId: tryToJoinPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/save:
    post:
      tags:
      - post-controller
      operationId: saveOrUnsavePost
      parameters:
      - name: isSave
        in: query
        required: true
        schema:
          type: boolean
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/rate:
    post:
      tags:
      - post-controller
      operationId: ratePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/participants/acceptJoinRequest/{userId}:
    post:
      tags:
      - post-controller
      operationId: acceptJoinRequest
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - ACCEPT
          - DENY
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/cancelJoinRequest:
    post:
      tags:
      - post-controller
      operationId: cancelJoinRequestForPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/addCoHostRole/{userId}:
    post:
      tags:
      - post-controller
      operationId: addCoHostRole
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/startOrEndPost/{postId}:
    post:
      tags:
      - post-controller
      operationId: startOrEndPost
      parameters:
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - START
          - END
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /notifications/add-device-token:
    post:
      tags:
      - notification-controller
      operationId: addDeviceTokenForUser
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs:
    get:
      tags:
      - club-controller
      operationId: getAllClubs
      parameters:
      - name: categories
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: longitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: latitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: distance
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoClubDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    post:
      tags:
      - club-controller
      operationId: createClub
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClubDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/members:
    get:
      tags:
      - club-controller
      operationId: getClubMembers
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoExtendedMiniUserForClub'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    post:
      tags:
      - club-controller
      operationId: tryToJoinClub
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/members/joinRequest/{userId}:
    post:
      tags:
      - club-controller
      operationId: joinRequest
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: action
        in: query
        required: true
        schema:
          type: string
          enum:
          - ACCEPT
          - DENY
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/leave:
    post:
      tags:
      - club-controller
      operationId: leaveClub
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/cancelJoinRequest:
    post:
      tags:
      - club-controller
      operationId: cancelJoinRequestForClub
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/admins/{userId}:
    post:
      tags:
      - club-controller
      operationId: addAdminRole
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    delete:
      tags:
      - club-controller
      operationId: removeAdminRole
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/updateUserInfo:
    patch:
      tags:
      - user-controller
      operationId: patchUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserDto'
            examples:
              Patch User Info:
                summary: Patch one/many of these fields
                description: Patch User Info
                value:
                  subToEmail: true
                  firstName: Kalo123
                  lastName: Mitev123
                  gender: MALE
                  birthDate: 2020-01-01
                  visibleGender: false
                  location:
                    name: LocationName123
                    address: locationAddress123
                    city: Sofia123
                    state: SofiaState123
                    country: country123
                    latitude: 123.345123
                    longitude: 123.345123
                  occupation: OccupationName123
                  profilePhotos:
                  - https://example.com/photo1321.jpg
                  - https://example.com/photo2321.jpg
                  interests:
                  - name: InterestName2321
                    icon: 0xe52b
                    category: MyCategory1
                  - name: InterestName3321
                    icon: 0xe52a
                    category: MyCategory2
                  phoneNumber: "359885230166"
                  details:
                    bio: ha
                    education: ha2
                    personalityType: ha3
                    workout: ha4
                    instagram: ha5
                    height: 180
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}:
    get:
      tags:
      - post-controller
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    delete:
      tags:
      - post-controller
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    patch:
      tags:
      - post-controller
      operationId: patchPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPostDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}:
    get:
      tags:
      - club-controller
      operationId: getClubById
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    delete:
      tags:
      - club-controller
      operationId: delete
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    patch:
      tags:
      - club-controller
      operationId: patchClub
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchClubDto'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}:
    get:
      tags:
      - user-controller
      operationId: getUserInfo
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}/receivedRatingsForParticipatedEvents:
    get:
      tags:
      - user-controller
      operationId: receivedRatingsForParticipatedEvents
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoParticipationRatingResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}/receivedEventRatings:
    get:
      tags:
      - user-controller
      operationId: receivedEventRatings
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoRatingResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}/receivedEventRatings/average:
    get:
      tags:
      - user-controller
      operationId: receivedEventRatingsAverage
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivedEventRatingsAverageResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}/posts:
    get:
      tags:
      - user-controller
      operationId: getUserPosts
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/{userId}/clubs:
    get:
      tags:
      - user-controller
      operationId: getUserClubs
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoClubDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/search:
    get:
      tags:
      - user-controller
      operationId: searchUsers
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/savedPosts:
    get:
      tags:
      - user-controller
      operationId: getUserSavedPosts
      parameters:
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/hasBasicInfo:
    get:
      tags:
      - user-controller
      operationId: hasBasicInfo
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasBasicInfoDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/friends/{userId}:
    get:
      tags:
      - user-controller
      operationId: getFriends
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
    delete:
      tags:
      - user-controller
      operationId: removeFriend
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/friendRequests:
    get:
      tags:
      - user-controller
      operationId: getAllFriendRequestsForUser
      parameters:
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /stripe/connect/onboarding-link/{accountId}:
    get:
      tags:
      - stripe-controller
      operationId: getOnboardingLink
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /stripe/connect/get-payment-sheet/{postId}:
    get:
      tags:
      - stripe-controller
      operationId: getPaymentSheet
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripePaymentSheet'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/waitRequests:
    get:
      tags:
      - post-controller
      operationId: getWaitRequestParticipants
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/participants:
    get:
      tags:
      - post-controller
      operationId: getPostParticipants
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoExtendedMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/joinRequests:
    get:
      tags:
      - post-controller
      operationId: getJoinRequestParticipants
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/search:
    get:
      tags:
      - post-controller
      operationId: searchPosts
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: askToJoin
        in: query
        required: false
        schema:
          type: boolean
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/search/map:
    get:
      tags:
      - post-controller
      operationId: findPostsInVisibleRegion
      parameters:
      - name: regionCenterLatitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: regionCenterLongitude
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: regionSpanLatitudeDelta
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: regionSpanLongitudeDelta
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /notifications:
    get:
      tags:
      - notification-controller
      operationId: getUserNotifications
      parameters:
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoNotificationDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /notifications/poll:
    get:
      tags:
      - notification-controller
      operationId: pollUserNotifications
      parameters:
      - name: lastTimestamp
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: lastId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /generatePresignedPutUrl:
    get:
      tags:
      - user-controller
      operationId: generatePresignedPutUrl
      parameters:
      - name: bucketName
        in: query
        required: true
        schema:
          type: string
      - name: keyName
        in: query
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreSignedUrlResponse'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/posts:
    get:
      tags:
      - club-controller
      operationId: getClubPosts
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoPostResponseDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/joinRequests:
    get:
      tags:
      - club-controller
      operationId: getJoinRequestParticipants_1
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoMiniUser'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/withCreatePostPermission:
    get:
      tags:
      - club-controller
      operationId: getClubsWithCreatePostPermission
      parameters:
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoClubDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/search:
    get:
      tags:
      - club-controller
      operationId: searchClubs
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponseDtoClubDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /users/friendRequest/{userId}:
    delete:
      tags:
      - user-controller
      operationId: cancelFriendRequest
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/removeParticipant/{userId}:
    delete:
      tags:
      - post-controller
      operationId: removeParticipant
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/removeCoHostRole/{userId}:
    delete:
      tags:
      - post-controller
      operationId: removeCoHostRole
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /posts/{postId}/leave:
    delete:
      tags:
      - post-controller
      operationId: leavePost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /notifications/remove-device-token:
    delete:
      tags:
      - notification-controller
      operationId: removeDeviceTokenForUser
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
  /clubs/{clubId}/members/{userId}:
    delete:
      tags:
      - club-controller
      operationId: removeMember
      parameters:
      - name: clubId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "400":
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorSchema'
      security:
      - security_auth: []
components:
  schemas:
    ApiError:
      required:
      - error
      type: object
      properties:
        status:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 EARLY_HINTS
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        debugMessage:
          type: string
        subErrors:
          type: array
          items:
            $ref: '#/components/schemas/ApiSubError'
        error:
          type: string
      discriminator:
        propertyName: error
    ApiErrorSchema:
      required:
      - apiError
      type: object
      properties:
        apiError:
          $ref: '#/components/schemas/ApiError'
    ApiSubError:
      type: object
    SuccessDto:
      required:
      - success
      type: object
      properties:
        success:
          type: boolean
    BaseLocation:
      required:
      - latitude
      - longitude
      - name
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    Interest:
      required:
      - category
      - icon
      - name
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        category:
          type: string
    UserDto:
      required:
      - birthDate
      - firstName
      - gender
      - interests
      - lastName
      - location
      - occupation
      - phoneNumber
      - profilePhotos
      - subToEmail
      - visibleGender
      type: object
      properties:
        subToEmail:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
          - MALE
          - FEMALE
        birthDate:
          type: string
          format: date-time
        visibleGender:
          type: boolean
        occupation:
          type: string
        profilePhotos:
          maxItems: 6
          minItems: 1
          type: array
          items:
            type: string
        interests:
          maxItems: 20
          minItems: 5
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        phoneNumber:
          type: string
        location:
          $ref: '#/components/schemas/BaseLocation'
    StripeResponseDto:
      required:
      - data
      type: object
      properties:
        data:
          type: string
    CreatePostDto:
      required:
      - accessibility
      - askToJoin
      - images
      - interests
      - location
      - payment
      - title
      type: object
      properties:
        title:
          type: string
        images:
          maxItems: 6
          minItems: 0
          type: array
          items:
            type: string
        description:
          type: string
        maximumPeople:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/BaseLocation'
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        payment:
          type: number
          format: double
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        askToJoin:
          type: boolean
        inClubID:
          type: string
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time
    CreateSuccessDto:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    ParticipationRatingDto:
      required:
      - liked
      type: object
      properties:
        liked:
          type: boolean
        comment:
          type: string
    RatingDto:
      required:
      - value
      type: object
      properties:
        value:
          type: number
          format: double
        comment:
          type: string
    CreateClubDto:
      required:
      - accessibility
      - askToJoin
      - images
      - interests
      - location
      - permissions
      - title
      type: object
      properties:
        title:
          type: string
        images:
          maxItems: 6
          minItems: 0
          type: array
          items:
            type: string
        description:
          type: string
        location:
          $ref: '#/components/schemas/BaseLocation'
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        permissions:
          type: string
          enum:
          - ALL
          - ADMINS_ONLY
        askToJoin:
          type: boolean
    PatchUserDto:
      type: object
      properties:
        subToEmail:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
          - MALE
          - FEMALE
        birthDate:
          type: string
          format: date-time
        visibleGender:
          type: boolean
        location:
          $ref: '#/components/schemas/BaseLocation'
        occupation:
          type: string
        phoneNumber:
          type: string
        details:
          $ref: '#/components/schemas/UserExtraDetailsDto'
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        profilePhotos:
          maxItems: 6
          minItems: 0
          type: array
          items:
            type: string
    UserExtraDetailsDto:
      type: object
      properties:
        bio:
          type: string
        education:
          type: string
        personalityType:
          type: string
        height:
          type: integer
          format: int32
        workout:
          type: string
        instagram:
          type: string
    PatchPostDto:
      type: object
      properties:
        title:
          type: string
        images:
          maxItems: 6
          minItems: 0
          type: array
          items:
            type: string
        description:
          type: string
        maximumPeople:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/BaseLocation'
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        payment:
          type: number
          format: double
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        hasEnded:
          type: boolean
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time
    PatchClubDto:
      type: object
      properties:
        title:
          type: string
        images:
          maxItems: 6
          minItems: 0
          type: array
          items:
            type: string
        description:
          type: string
        location:
          $ref: '#/components/schemas/BaseLocation'
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        permissions:
          type: string
          enum:
          - ALL
          - ADMINS_ONLY
        askToJoin:
          type: boolean
    UserExtraDetails:
      type: object
      properties:
        id:
          type: string
        bio:
          type: string
        education:
          type: string
        workout:
          type: string
        personalityType:
          type: string
        instagram:
          type: string
        height:
          type: integer
          format: int32
        savedPostIds:
          type: array
          items:
            type: string
        createdEventIds:
          type: array
          items:
            type: string
        participatedEventIds:
          type: array
          items:
            type: string
        clubIds:
          type: array
          items:
            type: string
    UserInfoDto:
      required:
      - birthDate
      - details
      - email
      - firstName
      - friendsCount
      - gender
      - id
      - interests
      - lastName
      - location
      - occupation
      - participatedPostsCount
      - phoneNumber
      - profilePhotos
      - subToEmail
      - verifiedEmail
      - verifiedPhone
      - visibleGender
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        subToEmail:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
          - MALE
          - FEMALE
        birthDate:
          type: string
          format: date
        visibleGender:
          type: boolean
        location:
          $ref: '#/components/schemas/BaseLocation'
        occupation:
          type: string
        profilePhotos:
          type: array
          items:
            type: string
        stripeAccountId:
          type: string
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        phoneNumber:
          type: string
        verifiedPhone:
          type: boolean
        verifiedEmail:
          type: boolean
        createdDate:
          type: string
          format: date-time
        details:
          $ref: '#/components/schemas/UserExtraDetails'
        participatedPostsCount:
          type: number
        friendsCount:
          type: number
        currentFriendshipStatus:
          type: string
          enum:
          - FRIENDS
          - NOT_FRIENDS
          - SENT_FRIEND_REQUEST
          - RECEIVED_FRIEND_REQUEST
    ListResponseDtoParticipationRatingResponseDto:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ParticipationRatingResponseDto'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    MiniUser:
      required:
      - birthDate
      - firstName
      - id
      - lastName
      - location
      - occupation
      - profilePhotos
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        profilePhotos:
          type: array
          items:
            type: string
        occupation:
          type: string
        location:
          $ref: '#/components/schemas/BaseLocation'
        birthDate:
          type: string
          format: date
    ParticipationRatingResponseDto:
      required:
      - id
      - liked
      - userFrom
      - userTo
      type: object
      properties:
        id:
          type: string
        comment:
          type: string
        liked:
          type: boolean
        userFrom:
          $ref: '#/components/schemas/MiniUser'
        userTo:
          $ref: '#/components/schemas/MiniUser'
    ListResponseDtoRatingResponseDto:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RatingResponseDto'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    PostResponseDto:
      required:
      - accessibility
      - askToJoin
      - createdAt
      - currentUserStatus
      - id
      - images
      - interests
      - location
      - owner
      - participantsCount
      - payment
      - savedByCurrentUser
      - status
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        images:
          type: array
          items:
            type: string
        description:
          type: string
        maximumPeople:
          type: integer
          format: int32
        location:
          $ref: '#/components/schemas/BaseLocation'
        toDate:
          type: string
          format: date-time
        fromDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        owner:
          $ref: '#/components/schemas/MiniUser'
        payment:
          type: number
          format: double
        currentUserStatus:
          type: string
          enum:
          - NOT_PARTICIPATING
          - IN_QUEUE
          - PARTICIPATING
        currentUserRole:
          type: string
          enum:
          - HOST
          - CO_HOST
          - NORMAL
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        askToJoin:
          type: boolean
        rating:
          type: number
          format: double
        clubId:
          type: string
        participantsCount:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - NOT_STARTED
          - HAS_STARTED
          - HAS_ENDED
        savedByCurrentUser:
          type: boolean
    RatingResponseDto:
      required:
      - id
      - post
      - user
      - value
      type: object
      properties:
        id:
          type: string
        comment:
          type: string
        value:
          type: number
          format: double
        user:
          $ref: '#/components/schemas/MiniUser'
        post:
          $ref: '#/components/schemas/PostResponseDto'
    ReceivedEventRatingsAverageResponseDto:
      type: object
      properties:
        averageRating:
          type: number
          format: double
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    ListResponseDtoPostResponseDto:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostResponseDto'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    ClubDto:
      required:
      - accessibility
      - askToJoin
      - createdAt
      - currentUserStatus
      - id
      - images
      - interests
      - location
      - membersCount
      - memories
      - owner
      - permissions
      - title
      type: object
      properties:
        id:
          type: string
        owner:
          $ref: '#/components/schemas/MiniUser'
        title:
          type: string
        images:
          type: array
          items:
            type: string
        description:
          type: string
        location:
          $ref: '#/components/schemas/BaseLocation'
        accessibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
        askToJoin:
          type: boolean
        currentUserStatus:
          type: string
          enum:
          - NOT_PARTICIPATING
          - IN_QUEUE
          - PARTICIPATING
        interests:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        memories:
          type: array
          items:
            type: string
        currentUserRole:
          type: string
          enum:
          - ADMIN
          - MEMBER
        membersCount:
          type: integer
          format: int32
        permissions:
          type: string
          enum:
          - ALL
          - ADMINS_ONLY
        createdAt:
          type: string
          format: date-time
    ListResponseDtoClubDto:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ClubDto'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    ListResponseDtoMiniUser:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MiniUser'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    HasBasicInfoDto:
      required:
      - hasBasicInfo
      type: object
      properties:
        hasBasicInfo:
          type: boolean
    StripePaymentSheet:
      required:
      - clientSecret
      - ownerStripeAccountId
      - publishableKey
      type: object
      properties:
        clientSecret:
          type: string
        publishableKey:
          type: string
        ownerStripeAccountId:
          type: string
    ExtendedMiniUser:
      required:
      - type
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/MiniUser'
        type:
          type: string
          enum:
          - HOST
          - CO_HOST
          - NORMAL
    ListResponseDtoExtendedMiniUser:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedMiniUser'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    AlertBodyAcceptedJoinRequest:
      required:
      - forType
      - image
      - title
      type: object
      properties:
        image:
          type: string
        title:
          type: string
        forType:
          type: string
          enum:
          - POST
          - CLUB
        alertBodyTypeAsString:
          type: string
    AlertBodyFriendRequestReceived:
      required:
      - senderName
      - senderProfilePhoto
      type: object
      properties:
        senderName:
          type: string
        senderProfilePhoto:
          type: string
        alertBodyTypeAsString:
          type: string
    AlertBodyReceivedJoinRequest:
      required:
      - forType
      - image
      - title
      type: object
      properties:
        image:
          type: string
        title:
          type: string
        forType:
          type: string
          enum:
          - POST
          - CLUB
        alertBodyTypeAsString:
          type: string
    AlertBodyReviewEndedPost:
      required:
      - image
      - title
      type: object
      properties:
        image:
          type: string
        title:
          type: string
        alertBodyTypeAsString:
          type: string
    ListResponseDtoNotificationDto:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDto'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
    NotificationDto:
      required:
      - createdDate
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        alertBodyAcceptedJoinRequest:
          $ref: '#/components/schemas/AlertBodyAcceptedJoinRequest'
        alertBodyReceivedJoinRequest:
          $ref: '#/components/schemas/AlertBodyReceivedJoinRequest'
        alertBodyFriendRequestReceived:
          $ref: '#/components/schemas/AlertBodyFriendRequestReceived'
        alertBodyReviewEndedPost:
          $ref: '#/components/schemas/AlertBodyReviewEndedPost'
        createdDate:
          type: string
          format: date-time
    PreSignedUrlResponse:
      required:
      - url
      type: object
      properties:
        url:
          type: string
    ExtendedMiniUserForClub:
      required:
      - type
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/MiniUser'
        type:
          type: string
          enum:
          - ADMIN
          - MEMBER
    ListResponseDtoExtendedMiniUserForClub:
      required:
      - data
      - lastPage
      - listCount
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedMiniUserForClub'
        lastPage:
          type: boolean
        listCount:
          type: integer
          format: int32
  securitySchemes:
    security_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
